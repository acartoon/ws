.advice.number-list
    ._item.number-list__item
        ._in
            ._title Оптимизируйте изображения
            p._text Изображения превышают рекомендуемый размер или хранятся в неправильном формате файлов.  Чтобы избежать такой проблемы, храните графические изображения в PNG, а фотографии в JPEG.
            p._text В этом блоке выводятся ссылки на изображения, которые нужно оптимизировать.
            img(src="i/blog-detail/1-1.png" alt="")._img
            p._text В большинстве случаев оптимизировать изображения можно прямо на сайте. С этим вам помогут сторонние онлайн сервисы, но для наилучшего результата следует добавить платный модуль.
    ._item.number-list__item
        ._in
            ._title Используйте кеш браузера
            p._text Браузеры кэшируют много данных, чтобы при повторном посещении им не приходилось перезагружать всю страницу целиком.
            p._text Сервис подскажет, какие ресурсы следует кэшировать.
            img(src="i/blog-detail/1-2.png" alt="")._img
            p._text Затем потребуется настроить сервер, чтобы браузер загружал уже полученные ранее ресурсы с локального диска, а не из Интернета.
    ._item.number-list__item
        ._in
            ._title Сократите CSS и JavaScript
            p._text Оптимизируя код (включая удаление пробелов, запятых и других ненужных символов), можно значительно увеличить скорость страницы. Также необходимо удалять комментарии кода, форматирование и неиспользуемый код.
            p._text Сервис предоставит ссылки на требующие минимизации файлы скриптов.
            img(src="i/blog-detail/1-3.png" alt="")._img
            p._text Для выполнения этих рекомендаций достаточно сократить количество скриптов CSS, JS, используя специальные инструменты минимизации.
    ._item.number-list__item
        ._in
            ._title Удалите код JavaScript и CSS, блокирующий отображение верхней части страницы
            p._text Чтобы отобразить страницу браузер должен сперва проанализировать HTML-код и построить дерево DOM. Если в начале страницы браузер столкнется со скриптом, то процесс приостановится до тех пор, пока этот скрип не выполнится. Поэтому все скрипты  следует перенести в конец страницы так, чтобы браузер мог беспрепятственно построить DOM.
            p._text Сервис укажет на файлы, которые блокируют отображение верхней части страницы.
            img(src="i/blog-detail/1-4.png" alt="")._img
    ._item.number-list__item
        ._in
            ._title Включите сжатие
            p._text Если размер файла CSS, HTML или JavaScript превышает 150 байт, его следует сжать с помощью функций gzip или deflate.
            p._text В этом блоке выводятся ссылки на ресурсы, требующие сжатия.
            img(src="i/blog-detail/1-5.png" alt="")._img
            p._text Сжатие включается в настройках сервера.
    ._item.number-list__item
        ._in
            ._title Сократите время ответа сервера
            p._text Скорость ответа сервера зависит от разных факторов: объем получаемого трафика, ресурсы, необходимые для каждой отдельной страницы, серверное ПО и тип хостинга.
            p._text В этом блоке выводится информация о времени ответа сервера и общие рекомендации.
            img(src="i/blog-detail/1-6.png" alt="")._img
            p._text Для ускорения отклика в первую очередь необходимо определить узкие места. Это могут быть, например, медленные запросы к базам данных или нехватка памяти.
            p._text На устранение проблемных мест обычно уходит много усилий, это трудоемкий процесс, требующий достаточной квалификации программиста. Процесс  оптимизации идет от исправления мелких недочетов к более крупным и менее очевидным проблемам.
